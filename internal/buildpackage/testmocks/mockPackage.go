// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/pack/internal/buildpackage (interfaces: Package)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockPackage is a mock of Package interface
type MockPackage struct {
	ctrl     *gomock.Controller
	recorder *MockPackageMockRecorder
}

// MockPackageMockRecorder is the mock recorder for MockPackage
type MockPackageMockRecorder struct {
	mock *MockPackage
}

// NewMockPackage creates a new mock instance
func NewMockPackage(ctrl *gomock.Controller) *MockPackage {
	mock := &MockPackage{ctrl: ctrl}
	mock.recorder = &MockPackageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackage) EXPECT() *MockPackageMockRecorder {
	return m.recorder
}

// GetLayer mocks base method
func (m *MockPackage) GetLayer(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayer", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayer indicates an expected call of GetLayer
func (mr *MockPackageMockRecorder) GetLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayer", reflect.TypeOf((*MockPackage)(nil).GetLayer), arg0)
}

// Label mocks base method
func (m *MockPackage) Label(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Label", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockPackageMockRecorder) Label(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockPackage)(nil).Label), arg0)
}
